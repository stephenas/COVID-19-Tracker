{"version":3,"sources":["images/image.png","InfoBox.js","Table.js","LineGraph.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","isRed1","total","args","Card","onClick","className","CardContent","Typography","color","Table","countries","map","flag","country","numeral","format","options","maintainAspectRatio","legend","display","elements","point","radius","maintainAspectRadio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","tootipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","buildChartData","previousData","chartData","date","newData","x","y","push","useEffect","fetch","then","response","json","timeline","casesTypeColors","backgroundColor","bordercolor","recovered","deaths","length","datasets","Map","center","zoom","MapContainer","scrollWheelZoom","TileLayer","url","attribution","console","log","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","App","setCountries","selectCountry","setSelectCountry","setCountryInfo","tableData","setTableData","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","printCounts","counts","lineGraphCountry","setLineGraphCountry","a","countryList","name","iso2","sort","b","getCountriesData","selectedCountry","event","currentCountry","target","src","CovidImage","alt","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1d0955d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\nimport \"./InfoBox.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, active, isRed, isRed1, total, ...args }) {\n  return (\n    <Card\n      onClick={args.onClick}\n      className={`infoBox__card ${active && \"infoBox__card--selected\"} ${\n        isRed1 && \"infoBox__card--redCases\"\n      } ${isRed && \"infoBox__card--red\"} \n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" className=\"infoBox__title\">\n          {title}\n        </Typography>\n        <h2\n          className={`infoBox__cases ${isRed1 && \"infoBox__cases--redCases\"} ${\n            isRed && \"infoBox__cases--red\"\n          } \n      }`}\n        >\n          {cases}\n        </h2>\n        <Typography color=\"textSecondary\" className=\"infoBox__total\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ flag, country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","//Using \"Chart.js\" package for graph.\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRadio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tootipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          //Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph({ casesType, country, ...args }) {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType) => {\n    // console.log(\"graph data - \", data.cases);\n    const chartData = [];\n    let previousData;\n    for (let date in data.cases) {\n      if (previousData) {\n        const newData = {\n          x: date,\n          y: data[casesType][date] - previousData,\n        };\n        chartData.push(newData);\n      }\n      previousData = data[casesType][date];\n    }\n    return chartData;\n  };\n\n  //End point - https://disease.sh/v3/covid-19/historical/all?lastdays=120\n  useEffect(() => {\n    if (country === \"Worldwild\") {\n      fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=90\")\n        .then((response) => response.json())\n        .then((data) => {\n          setData(buildChartData(data, casesType));\n        });\n    } else {\n      fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=90`)\n        .then((response) => response.json())\n        .then((data) => {\n          setData(buildChartData(data.timeline, casesType));\n        });\n    }\n  }, [casesType, country]);\n\n  const casesTypeColors = {\n    cases: {\n      backgroundColor: \"#E95C5F\",\n      bordercolor: \"#000000\",\n    },\n    recovered: {\n      backgroundColor: \"#57C07F\",\n      bordercolor: \"#000000\",\n    },\n    deaths: {\n      backgroundColor: \"#B82925\",\n      bordercolor: \"#000000\",\n    },\n  };\n\n  return (\n    <div className={args.className}>\n      {data?.length > 0 && (\n        <Line\n          className=\"lingGraph\"\n          className={args.className}\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesTypeColors[casesType].backgroundColor,\n                bordercolor: casesTypeColors[casesType].bordercolor,\n                data: data,\n              },\n            ],\n          }}\n        ></Line>\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState } from \"react\";\nimport { MapContainer, TileLayer, Circle, Popup } from \"react-leaflet\";\nimport \"./Map.css\";\nimport numeral from \"numeral\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  const recovered = casesType === \"recovered\" && true;\n  const cases = casesType === \"cases\" && true;\n  const deaths = casesType === \"deaths\" && true;\n\n  return (\n    <div className=\"map\">\n      <MapContainer\n        // center={center}\n        center={center}\n        zoom={zoom}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contibutors'\n        ></TileLayer>\n        {console.log(\"map center - \", center)}\n        {casesType === \"recovered\" &&\n          countries.map((country) => (\n            <Circle\n              center={[country.countryInfo.lat, country.countryInfo.long]}\n              fillOpacity={0.4}\n              color={\"green\"}\n              fillColor={\"green\"}\n              radius={Math.sqrt(country[casesType]) * 400}\n            >\n              <Popup>\n                <div className=\"popup__container\">\n                  <div\n                    className=\"popup__flag\"\n                    style={{\n                      backgroundImage: `url(${country.countryInfo.flag})`,\n                    }}\n                  ></div>\n                  <div className=\"popup__country\">{country.country}</div>\n                  <div className=\"popup__cases\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                  </div>\n                </div>\n              </Popup>\n            </Circle>\n          ))}\n        {casesType === \"cases\" &&\n          countries.map((country) => (\n            <Circle\n              center={[country.countryInfo.lat, country.countryInfo.long]}\n              fillOpacity={0.4}\n              color={\"red\"}\n              fillColor={\"red\"}\n              radius={Math.sqrt(country[casesType]) * 300}\n            >\n              <Popup>\n                <div className=\"popup__container\">\n                  <div\n                    className=\"popup__flag\"\n                    style={{\n                      backgroundImage: `url(${country.countryInfo.flag})`,\n                    }}\n                  ></div>\n                  <div className=\"popup__country\">{country.country}</div>\n                  <div className=\"popup__cases\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                  </div>\n                </div>\n              </Popup>\n            </Circle>\n          ))}\n        {casesType === \"deaths\" &&\n          countries.map((country) => (\n            <Circle\n              center={[country.countryInfo.lat, country.countryInfo.long]}\n              fillOpacity={0.4}\n              color={\"#B82925\"}\n              fillColor={\"#B82925\"}\n              radius={Math.sqrt(country[casesType]) * 1500}\n            >\n              <Popup>\n                <div className=\"popup__container\">\n                  <div\n                    className=\"popup__flag\"\n                    style={{\n                      backgroundImage: `url(${country.countryInfo.flag})`,\n                    }}\n                  ></div>\n                  <div className=\"popup__country\">{country.country}</div>\n                  <div className=\"popup__cases\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                  </div>\n                  <div className=\"popup__deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                  </div>\n                </div>\n              </Popup>\n            </Circle>\n          ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport CovidImage from \"./images/image.png\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [selectCountry, setSelectCountry] = useState(\"Worldwild\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  let [mapCenter, setMapCenter] = useState({\n    lat: 24,\n    lng: 54,\n  });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const printCounts = (counts) => {\n    if (counts) {\n      return `+${numeral(counts).format(\"0.0a\")}`;\n    } else {\n      return \"+0\";\n    }\n  };\n  const [lineGraphCountry, setLineGraphCountry] = useState(\"Worldwild\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countryList = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setCountries(countryList);\n          setMapCountries(data);\n          setTableData(data.sort((a, b) => (a.cases > b.cases ? -1 : 1))); //It's shows cases of the country in decending order\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const selectedCountry = async (event) => {\n    const currentCountry = event.target.value;\n\n    // loads the page according to the selected counry\n    if (currentCountry === \"Worldwild\") {\n      const url = \"https://disease.sh/v3/covid-19/all\";\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setSelectCountry(currentCountry);\n          setCountryInfo(data);\n          setMapCenter([24, 54]);\n          setMapZoom(6);\n          setLineGraphCountry(\"Worldwild\");\n        });\n    } else {\n      const url = `https://disease.sh/v3/covid-19/countries/${currentCountry}`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setSelectCountry(currentCountry);\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n          setLineGraphCountry(data.country);\n        });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <img src={CovidImage} alt=\"\" className=\"app__covidImage\" />\n          {/* <h1 className=\"app__header__title\">Covid-19 Tracker</h1> */}\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={selectedCountry}\n              value={selectCountry}\n            >\n              <MenuItem value=\"Worldwild\">Worldwild</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name} </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__states\">\n          <InfoBox\n            isRed1\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronovirus cases\"\n            cases={printCounts(countryInfo.todayCases)}\n            total={printCounts(countryInfo.cases)}\n          ></InfoBox>\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={printCounts(countryInfo.todayRecovered)}\n            total={printCounts(countryInfo.recovered)}\n          ></InfoBox>\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={printCounts(countryInfo.todayDeaths)}\n            total={printCounts(countryInfo.deaths)}\n          ></InfoBox>\n        </div>\n        <Map\n          className=\"app__left__map\"\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        ></Map>\n      </div>\n      <div className=\"app__right\">\n        <Card className=\"app__right__card\">\n          <CardContent>\n            {/* Table */}\n            <h3>Live Cases by country</h3>\n            <Table countries={tableData} />\n            {/* Graph */}\n            <h3 className=\"graphTitle\">\n              Total {casesType} in {lineGraphCountry}\n            </h3>\n            <LineGraph\n              className=\"app__graph\"\n              country={lineGraphCountry}\n              casesType={casesType}\n            ></LineGraph>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}